setwd()
setwd("~/Desktop/Machine-Learning-A2Z/10. Model Selection/2.XGBoost")
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
install.packages('xgboost')
library(xgboost)
classifier = xgboost()
library(xgboost)
training_data = training_set[-11]
View(training_data)
View(training_data)
View(training_data)
training_data = as.matrix(training_set[-11])
View(training_set)
View(training_set)
View(training_data)
classifier = xgboost(data = as.matrix(training_set[-11]), label = training_set$Exited, nrounds = 10)
library(xgboost)
classifier = xgboost(data = as.matrix(training_set[-11]), label = training_set$Exited, nrounds = 10)
# importing the dataset
dataset = read.csv('Churn_Modelling.csv')
dataset = dataset[4:14]
# encoding categorical variables as factors
dataset$Geography = as.numeric(factor(dataset$Geography,
levels = c('France', 'Spain', 'Germany'),
labels = c(1, 2, 3)))
dataset$Gender = as.numeric(factor(dataset$Gender,
levels = c('Female', 'Male'),
labels = c(1, 2)))
# splitting the dataset into training and testing set
library(caTools)
set.seed(123)
split = sample.split(dataset$Exited, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
classifier = xgboost(data = as.matrix(training_set[-11]), label = training_set$Exited, nrounds = 10)
library(caret)
install.packages('caret')
library(car
library(caret)
library(caret)
install.packages('caret')
library(caret)
folds = createFolds(training_set$Exited, k = 10)
folds = createFolds(training_set$Exited, k = 10)
cv = lapply(folds, function(x){
training_fold = training_set[-x, ]
test_fold = training_set[x, ]
classifier = xgboost(data = as.matrix(training_set[-11]), label = training_set$Exited, nrounds = 10)
y_pred = predict(classifier, newdata = as.matrix(test_fold[-11]))
y_pred = (y_pred >= 0.5)
cm = table(test_fold[, 11], y_pred)
accuracy = (cm[1,1]+cm[2,2]) / (cm[1, 1] + cm[2, 2] + cm[1,2] + cm[2, 1])
return(accuracy)
})
accuracy = mean(as.numeric(cv))
View(training_data)
